{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://schemas.letsflow.io/v1.0/scenario",
  "type": "object",
  "properties": {
    "id": {
      "description": "The unique identifier of the scenario. This is generated from the hash of the scenario.",
      "type": "string",
      "format": "uuid"
    },
    "name": {
      "description": "A consistent name for the scenario.",
      "type": "string"
    },
    "version": {
      "description": "A semantic version of the scenario. Used in combination with the name.",
      "type": "string"
    },
    "title": {
      "description": "A short description of the workflow. This is copied to the process.",
      "type": "string"
    },
    "description": {
      "description": "A longer description of the workflow.",
      "type": "string"
    },
    "tags": {
      "description": "A list of tags for categorization and filtering.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "actors": {
      "description": "Schemas for actors that can participate in the process",
      "type": "object",
      "additionalProperties": {
        "$ref": "https://schemas.letsflow.io/v1.0/actor"
      }
    },
    "actions": {
      "description": "Actions that can be performed in the process",
      "type": "object",
      "additionalProperties": {
        "$ref": "https://schemas.letsflow.io/v1.0/action"
      }
    },
    "states": {
      "description": "The scenario models a workflow as a finite state machine. Each state is a node in the graph.",
      "type": "object",
      "properties": {
        "*": {
          "description": "The wildcard state sets default properties of every state.",
          "$ref": "#/$defs/partialState"
        }
      },
      "patternProperties": {
        "^\\(.+\\)$": {
          "$ref": "#/$defs/endState"
        }
      },
      "additionalProperties": {
        "$ref": "#/$defs/state"
      },
      "required": ["initial"]
    },
    "vars": {
      "description": "Schemas of variables that can be used in the process.",
      "type": "object",
      "additionalProperties": {
        "$ref": "https://schemas.letsflow.io/v1.0/schema"
      }
    },
    "result": {
      "description": "The schema of the result of the process.",
      "$ref": "https://schemas.letsflow.io/v1.0/schema"
    }
  },
  "required": ["states"],
  "dependentRequired": {
    "name": ["version"]
  },
  "$defs": {
    "partialState": {
      "type": "object",
      "properties": {
        "schema": {
          "description": "The JSON schema that describes this state.",
          "type": "string"
        },
        "title": {
          "description": "A short, human-readable description of the state.",
          "$ref": "#/$defs/stringFn"
        },
        "description": {
          "description": "A longer, human-readable description of the state.",
          "$ref": "#/$defs/stringFn"
        },
        "instructions": {
          "description": "Map of instructions for each actor. The key is the actor key.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/stringFn"
          }
        },
        "notify": {
          "description": "Services to notify when the state is entered.",
          "$ref": "#/$defs/notify"
        },
        "log": {
          "description": "Information to log when the transitioned from this state",
          "$ref": "#/$defs/logOrFalse"
        },
        "on": {
          "description": "The action that triggers the state transition e.",
          "type": ["string", "null"]
        },
        "after": {
          "description": "The time period after which the state transition is triggered.",
          "$ref": "#/$defs/timePeriod"
        },
        "by": {
          "description": "The actor(s) that are allowed triggers the state transition.",
          "$ref": "#/$defs/multiString"
        },
        "goto": {
          "description": "The state to transition to.",
          "type": ["string", "null"]
        },
        "transitions": {
          "description": "A list of transitions to other states.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/transition"
          }
        }
      },
      "dependentRequired": {
        "on": ["goto"],
        "after": ["goto"]
      },
      "dependentSchemas": {
        "after": {
          "errorMessage": "must not have a property by when property after is present",
          "not": {
            "required": ["by"]
          }
        },
        "transitions": {
          "allOf": [
            {
              "errorMessage": "must not have a property by when property transitions is present",
              "not": { "required": ["by"] }
            },
            {
              "errorMessage": "must not have a property goto when property transitions is present",
              "not": { "required": ["goto"] }
            },
            {
              "errorMessage": "must not have a property log when property transitions is present",
              "not": { "required": ["log"] }
            }
          ]
        }
      },
      "not": {
        "properties": {
          "on": {
            "type": "null"
          }
        },
        "required": ["on", "by"]
      }
    },
    "state": {
      "allOf": [
        {
          "$ref": "#/$defs/partialState"
        },
        {
          "type": "object",
          "oneOf": [
            { "required": ["on"] },
            { "required": ["after"] },
            { "required": ["transitions"] }
          ]
        }
      ]
    },
    "endState": {
      "description": "An end state is a state that ends the process. It has no transitions.",
      "type": ["object", "null"],
      "properties": {
        "title": {
          "description": "A short, human-readable description of the state.",
          "$ref": "#/$defs/stringFn"
        },
        "description": {
          "description": "A longer, human-readable description of the state.",
          "$ref": "#/$defs/stringFn"
        },
        "instructions": {
          "description": "Map of instructions for each actor. The key is the actor key.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/stringFn"
          }
        },
        "notify": {
          "description": "Services to notify when the state is entered.",
          "$ref": "#/$defs/notify"
        }
      }
    },
    "transition": {
      "type": "object",
      "properties": {
        "on": {
          "description": "The action that triggers the state transition.",
          "type": ["string", "null"]
        },
        "by": {
          "description": "The actor(s) that are allowed triggers the state transition.",
          "$ref": "#/$defs/multiString"
        },
        "after": {
          "description": "The time period after which the state transition is triggered.",
          "$ref": "#/$defs/timePeriod"
        },
        "if": {
          "description": "A condition that must be met for the transition to occur.",
          "$ref": "#/$defs/booleanFn"
        },
        "goto": {
          "description": "The state to transition to.",
          "type": ["string", "null"]
        },
        "log": {
          "description": "Information to log for this state transition",
          "$ref": "#/$defs/logOrFalse"
        }
      },
      "required": ["goto"],
      "oneOf": [
        { "required": ["on"] },
        { "required": ["after"] }
      ],
      "dependentSchemas": {
        "after": {
          "not": {
            "required": ["by"]
          }
        }
      }
    },
    "notify": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/notifyExplicit"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/notifyExplicit"
              }
            ]
          }
        }
      ]
    },
    "notifyExplicit": {
      "type": "object",
      "properties": {
        "service": {
          "description": "The service to notify.",
          "type": "string"
        },
        "if": {
          "description": "A condition that must be met for the notification to occur.",
          "$ref": "#/$defs/booleanFn"
        },
        "after": {
          "description": "The delay for the notification.",
          "$ref": "#/$defs/timePeriod"
        },
        "trigger": {
          "description": "The action that is triggered if the service gives a response.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "https://schemas.letsflow.io/v1.0/fn"
            },
            {
              "type": "null"
            }
          ]
        },
        "message": {
          "description": "The custom message to send to the service.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "https://schemas.letsflow.io/v1.0/fn"
            },
            {
              "type": "object",
              "properties": {
                "schema": {
                  "description": "The JSON schema that describes this message.",
                  "type": "string"
                },
                "<ref>": false,
                "<tpl>": false
              }
            }
          ]
        }
      },
      "required": ["service"]
    },
    "log": {
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the log entry.",
          "$ref": "#/$defs/stringFn"
        },
        "description": {
          "description": "The description of the log entry.",
          "$ref": "#/$defs/stringFn"
        },
        "if": {
          "description": "A condition that must be met for the log entry to be created.",
          "$ref": "#/$defs/booleanFn"
        }
      }
    },
    "logOrFalse": {
      "oneOf": [
        {
          "$ref": "#/$defs/log"
        },
        {
          "type": "boolean",
          "const": false
        }
      ]
    },
    "stringFn": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "https://schemas.letsflow.io/v1.0/fn"
        }
      ]
    },
    "booleanFn": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "https://schemas.letsflow.io/v1.0/fn"
        }
      ]
    },
    "multiString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "timePeriod": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^(\\d+)\\s*(s|second|seconds|m|minute|minutes|h|hour|hours|d|day|days|w|week|weeks)$"
        },
        {
          "type": "integer",
          "minimum": 0
        }
      ]
    }
  }
}
